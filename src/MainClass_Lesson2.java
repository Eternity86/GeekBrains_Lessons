public class MainClass_Lesson2 {
    public static void main(String[] args) {
        /* ДЗ ко второму уроку по Java на GeekBrains */

        /* 1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
        С помощью цикла и условия заменить 0 на 1, 1 на 0. */
        int[] arrInt = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0 };
        for (int i = 0; i < arrInt.length; i++) {
            if (arrInt[i] == 0) {
                arrInt[i] = 1;
            } else if (arrInt[i] == 1) {                // из условия задачи данная проверка не нужна, но лишняя "защита от дурака" не помешает никогда
                arrInt[i] = 0;
            }
            System.out.print(arrInt[i] + " ");
        }
        System.out.println();

        //=====================================================================================================================================================

        /* 2. Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21. */
        int[] arrayInt = new int[8];
        for (int i = 0, j = 0; i < arrayInt.length; i++, j+=3) {
            arrayInt[i] = j;
            System.out.print(arrayInt[i] + " ");
        }
        System.out.println();

        //=====================================================================================================================================================

        /* 3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2. */
        int[] array = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        for (int i = 0; i < array.length; i++) {
            if (array[i] < 6) array[i] *= 2;
            System.out.print(array[i] + " ");
        }
        System.out.println();

        //=====================================================================================================================================================

        /* 4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое), и с помощью цикла(-ов)
        заполнить его диагональные элементы единицами. */
        int m = 9, n = 9;                             // размерность двумерного массива-матрицы m*n
        int[][] matrix = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j || i == ((m - 1) - j)) {     // через объединение условий мы не заносим дважды в центр массива единицу, когда размерность массива нечётная
                    matrix[i][j] = 1;
                } else {
                    matrix[i][j] = 0;                   // по умолчанию значения типа int всё равно инициализируются нулём
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }

        //=====================================================================================================================================================

        /* 5. ** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета). */
        int m1 = 10;                                             // размерность массива
        int[] array1Dimension = new int[m1];
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;   // минимальному значению присваиваем максимальное значение Integer (класс-обёртка для int), а максимальному - наоборот минимальное
        for (int i = 0; i < array1Dimension.length; i++) {
            if (array1Dimension[i] > max) max = array1Dimension[i];
            if (array1Dimension[i] < min) min = array1Dimension[i];
        }
        System.out.println(min + " " + max);


        //=====================================================================================================================================================

        /* 6. ** Написать метод, в который передается не пустой одномерный целочисленный массив,
        метод должен вернуть true если в массиве есть место, в котором сумма левой и правой части массива равны.
        Примеры: checkBalance([1, 1, 1, || 2, 1]) → true, checkBalance ([2, 1, 1, 2, 1]) → false, checkBalance ([10, || 10]) → true,
        граница показана символами ||, эти символы в массив не входят. */
        int m2 = 6;
        int[] arr2 = new int[m2];
        System.out.println(checkBalance(arr2));


        //=====================================================================================================================================================

        /* 7. **** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или отрицательным),
        при этом метод должен сместить все элементы массива на n позиций. Для усложнения задачи нельзя пользоваться вспомогательными массивами. */
        int m3 = 6;
        int[] arr3 = new int[m3];
        arrayShift(arr3);


        //=====================================================================================================================================================
    }

    public static boolean checkBalance(int[] array) {
        if (array[0] == (array[1] + array[array.length - 1]));
        if ((array[0] + array[1]) == (array[2] + array[array.length - 1]));
        return true;
    }

    public static void arrayShift(int[] array) {

    }
}
